import os
import shutil
import callgrasp as GRASP

# Data from Jefferson Lab (http://education.jlab.org/itselemental)
# (mass number, mass)
atomic_data=(
    (0, 0)   ,       # Static point nucleus
    (0, 1.0794),    # Need to use point nucleus
    (4, 4.002602),
    (7, 6.941),
    (9, 9.012182),
    (11, 10.811),
    (12, 12.0107),
    (14, 14.0067),
    (16, 15.9994),
    (19, 18.9984032),
    (20, 20.1797),
    (23, 22.98976928),
    (24, 24.3050),
    (27, 26.9815386),
    (28, 29.0855),
    (31, 30.973762),
    (32, 32.065),
    (35, 35.453),
    (40, 39.948),
    (39, 39.0938),
    (40, 40.078),
    (45, 44.955912),
    (48, 47.867),
    (51, 50.9415),
    (52, 51.9961),
    (55, 54.938045),
    (56, 55.845),
    (59, 58.933195),
    (59, 58.6934),
    (64, 63.546),
    (65, 65.409),
    (70, 69.723),
    (73, 72.64),
    (75, 74.92160),
    (79, 78.96),
    (80, 79.904),
    (84, 83.798),
    (85, 85.4678),
    (88, 87.62),
    (89, 88.90585),
    (91, 91.224),
    (93, 92.90638),
    (96, 95.94),
    (98, 98),
    (101, 10.07),
    (103, 102.90550),
    (106, 106.42),
    (108, 107.8682),
    (112, 112.411),
    (115, 114.818),
    (119, 118.710),
    (122, 121.760),
    (128, 127.60),
    (127, 126.90447),
    (131, 131.293),
    (133, 132.9054519),
    (137, 137.327),
    (139, 138.90547),
    (140, 140.116),
    (141, 140.90765),
    (144, 144.242),
    (145, 145),
    (150, 150.36),
    (152, 151.964),
    (157, 157.25),
    (159, 158.92535),
    (163, 162.5),
    (165, 164.93032),
    (167, 167.259),
    (169, 168.93421),
    (173, 173.04),
    (175, 174.967),
    (178, 178.49),
    (181, 180.94788),
    (184, 183.84),
    (186, 186.207),
    (190, 190.23),
    (192, 192.217),
    (195, 195.084),
    (197, 196.966569),
    (201, 200.59),
    (204, 204.3833),
    (207, 207.2),
    (209, 208.9804),
    (209, 209),
    (210, 210),
    (222, 222),
    (223, 223),
    (226, 226),
    (227, 227),
    (232, 232.03806),
    (231, 231.03588),
    (238, 238.02891),
    (237, 237),
    (244, 244),
    (243, 243),
    (247, 247),
    (247, 247),
    (251, 251),
    (252, 252),
    (257, 257),
    (258, 258),
    (259, 259),
    (262, 262),
    (267, 267),
    (268, 268),
    (271, 271),
    (272, 272),
    (277, 277),
    (276, 276),
    (281, 281),
    (280, 280),
    (285, 285),
    (284, 284),
    (289, 289),
    (288, 288),
    (291, 291),
    (293, 293),  # Estimated
    (294, 294),
    (316, 316),
    (318, 318),
    (322, 322),
    (324, 324),
    (326, 326),
    (330, 330),
    (332, 332),
    (334, 334),
    (338, 338),
    (340, 340),
    (342, 342),
    (346, 346),
    (348, 348),
    (350, 350),
    (354, 354),
    (356, 356),
    (358, 358),
    (362, 362),
    (364, 364),
    (366, 366),
)

def Generate_Nuclear_files(Z_list):
    """
    Generate subfolders and files containing nuclear data for the list of elements (atomic numbers)
    :param Z_list: list of atomic numbers for which subfolders and isodata will be generated
    :return: 0
    """
    for Z in Z_list:
        #clear and create subfolder
        fname = 'Z' + str(Z)
        if os.path.isdir(fname): shutil.rmtree(fname)
        os.mkdir(fname)
        os.chdir(fname)

        #create isodata file (file with nuclear data specification)
        GRASP.rnucleus(Z, atomic_data[Z][0], atomic_data[Z][1])

        os.chdir('..')
    return 0

if __name__ == "__main__":
    GRASP.setENV()
    Z_list = [2,10,74]
    os.chdir('test')
    Generate_Nuclear_files(Z_list)
    os.chdir('..')

